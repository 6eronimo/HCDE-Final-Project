Weather Data Retrieval (Weather API)

	1.	Import necessary libraries (requests) and API key (key.py).
	2.	Define a function get_weather(city):
	    - Build the API URL with the city parameter and units=f for Fahrenheit.
	    - Send a GET request to the Weatherstack API.
	    - If the response is successful:
	    - Parse the JSON response.
	    - Return the weather data.
	    - Otherwise, raise an exception with the error message.
	3.	Write a test function test_get_weather():
	    - Call get_weather() with a sample city (e.g., “Seattle”).
	    - Print the city, temperature (in Fahrenheit), and weather description.

Outfit Recommendation Logic

	1.	Define a function generate_outfit_recommendation(temperature, weather_conditions):
	    Parameters:
        -	temperature (int): The current temperature in Fahrenheit.
	    -	weather_conditions (str): A description of the current weather.
	    -	Determine outfit recommendations based on temperature:
	        -	If temperature < 50°F: Recommend a warm coat and gloves.
	        -	If 50°F ≤ temperature < 68°F: Recommend a jacket or sweater.
	    -	If temperature ≥ 68°F: Recommend a t-shirt.
	    -	Add specific recommendations based on weather_conditions:
	        -	If “rain”: Suggest an umbrella.
	        -	If “snow”: Suggest boots and a heavy coat.
	        -	If “sun”: Suggest sunglasses and sunscreen.
	    -	Append a friendly closing statement: “Stay prepared and own the day!”
	    -	Return the complete outfit recommendation string.

	2.	Write a test function test_generate_outfit_recommendation():
	    -	Call generate_outfit_recommendation() with a variety of temperature and weather condition combinations:
	    -	Example 1: temperature = 45, weather_conditions = "Rainy"
	    -	Example 2: temperature = 60, weather_conditions = "Cloudy"
	    -	Example 3: temperature = 75, weather_conditions = "Sunny"
	    -	Print the input and the returned outfit recommendation.
	    -	Verify the output matches expected recommendations.

Generating HTML Output (WORK IN PROGRESS)

	1.	Import necessary modules (os, weather_api, and outfit_logic).
	2.	Define a function create_html_output(city, weather_data, outfit_recommendation):
	    -	Parameters:
	    -	city (str): Name of the city.
	    -	weather_data (dict): Weather data retrieved from the Weatherstack API.
	    -	outfit_recommendation (str): Recommendation generated by generate_outfit_recommendation().
	    -	Extract the following from weather_data:
	        -	City name.
	    -	Temperature in Fahrenheit.
	    -   Weather description.
	    -	Use an HTML template string:
	    -	Insert the city name.
	    -	Insert the temperature and weather description.
	    -	Insert the outfit recommendation.
	    -	Write the generated HTML content to an output.html file.
	3.	Call create_html_output() in main():
	    -	After retrieving weather data and generating the outfit recommendation, pass them to create_html_output().
	    -	Notify the user that the HTML file has been created and provide its location.


Stretch Goals (WORK IN PROGRESS)

Hourly Forecasts for the Day

	-	Enhance the get_weather() function:
	-	Modify the API request to include hourly data (if supported by Weatherstack).
	-	Parse hourly temperature and condition data from the response.
	-	Modify generate_outfit_recommendation():
	-	Include recommendations for changing conditions throughout the day.
	-	Example: “It’s sunny now, but it’ll rain in the evening. Don’t forget an umbrella!”
	-	Include hourly forecast data in the HTML output:
	-	Add a “Forecast” section with hourly weather details and outfit advice.

UV Index for Sun Protection

	-	Identify an API that provides UV index data (e.g., OpenUV API).
	-	Define a function get_uv_index(city):
	-	Use the city’s location to fetch UV index data.
	-	Return the UV index value.
	-	Modify generate_outfit_recommendation():
	-	If UV index is high (≥6): Add a suggestion for sunscreen and protective clothing.
	-	Include UV index details in the HTML output:
	-	Add a “UV Index” section with recommendations.

Accessory Recommendations

	-	Expand generate_outfit_recommendation():
	-	Add accessory suggestions based on weather:
	-	Cold weather: Hats, scarves, thermal layers.
	-	Rainy weather: Waterproof boots, umbrellas.
	-	Sunny weather: Sunglasses, sunscreen.
	-	Add a new section to the HTML output:
	-	Include “Additional Accessories” with specific suggestions.

Personalized Recommendations

	-	Add a settings file (e.g., preferences.json) to store user preferences:
	-	Examples: Sensitivity to cold, preference for lighter or heavier layers.
	-	Modify generate_outfit_recommendation():
	-	Adjust recommendations based on user preferences.
	-	Example: Suggest lighter layers for users who tend to feel warm.
	-	Allow users to update preferences via a command-line prompt or web form.